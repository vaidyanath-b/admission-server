generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DocumentType {
  code           String           @id @unique
  name           String           @unique
  DocumentUpdate DocumentUpdate[]
  PhaseDocument  PhaseDocument[]
  Document       Document[]
}

enum role_custom {
  VERIFIER_1
  VERIFIER_2
  ADMIN
  APPLICANT
}

model profile {
  id   String @id @db.Uuid
  role role_custom   @default(APPLICANT)
  user User   @relation(fields: [id], references: [id])
}

model User {
  id              String           @id @db.Uuid
  email           String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  DocumentUpdates DocumentUpdate[]
  Applicant       Applicant?
  profile         profile[]
  Allotment       Allotment[]
}

enum Course {
  COMPUTER_SCIENCE
  ELECTRONICS
  MECHANICAL
  ELECTRICAL
}

enum Quota {
  GENERAL
  SC
  ST
  OBC
  EWS
}

model Seats {
  course Course
  quota  Quota
  seats  Int

  @@id([course, quota])
}

model Applicant {
  id                           Int                           @id @default(autoincrement())
  userId                       String                        @unique @db.Uuid
  firstName                    String
  currentPhaseId               Int?
  currentPhase                 Phase?                        @relation(fields: [currentPhaseId], references: [order])
  lastName                     String
  User                         User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  infoComplete                 Boolean  @default(false)
  docsComplete                 Boolean  @default(false)
  DocumentUpdate               DocumentUpdate[]
  Document                     Document[]
  parentDetails                ParentDetails?
  permanentAddress             PermanentAddress?
  presentAddress               PresentAddress?
  guardianAddress              GuardianAddress?
  previousInstitutionDetails   PreviousInstitutionDetails?
  qualifyingExaminationDetails QualifyingExaminationDetails?
  matriculationDetails         MatriculationDetails?
  bankDetails                  BankDetails?
  ApplicantDetails             ApplicantDetails?
  Allotment                    Allotment[]
}

model Allotment {
  allotment         Int
  applicantId       Int
  course            Course
  quota             Quota
  allotmentMemoLink String?
  verified          Boolean   @default(false)
  verifiedBy        String?   @db.Uuid
  verifier          User?     @relation(fields: [verifiedBy], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  applicant         Applicant @relation(fields: [applicantId], references: [id])

  @@id([applicantId, allotment])
}

model ApplicantDetails {
  applicantId           Int      @id
  admissionNo           String
  name                  String
  dateOfBirth           DateTime
  gender                String
  caste                 String
  religion              String
  nativity              String
  community             String
  village               String
  taluk                 String
  bloodGroup            String
  studentMobile         String
  studentEmail          String
  annualIncomeOfParents String

  Applicant Applicant @relation(fields: [applicantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ParentDetails {
  fatherName       String
  motherName       String
  fatherPhone      String
  fatherOccupation String
  motherPhone      String
  fatherEmail      String
  motherEmail      String
  motherOccupation String
  applicantId      Int       @id
  applicant        Applicant @relation(fields: [applicantId], references: [id])
}

model PermanentAddress {
  addressLines String
  postOffice   String
  district     String
  state        String
  applicantId  Int       @id
  applicant    Applicant @relation(fields: [applicantId], references: [id])
}

model PresentAddress {
  addressLines String
  postOffice   String
  district     String
  state        String
  applicantId  Int       @id
  applicant    Applicant @relation(fields: [applicantId], references: [id])
}

model GuardianAddress {
  addressLines String
  postOffice   String
  district     String
  state        String
  phoneNumber  String
  applicantId  Int       @id
  applicant    Applicant @relation(fields: [applicantId], references: [id])
}

model PreviousInstitutionDetails {
  nameOfInstitution   String
  dateOfAdmission     DateTime
  course              String
  category            String
  reservation         String
  previousInstitution String
  tcNo                String
  tcDate              DateTime
  applicantId         Int       @id
  applicant           Applicant @relation(fields: [applicantId], references: [id])
}

model QualifyingExaminationDetails {
  qualifyingExam    String
  regNoQualExam     String
  qualifyingBoard   String
  percentage        Float
  yearOfPass        Int
  nameOfInstitution String
  applicantId       Int       @id
  applicant         Applicant @relation(fields: [applicantId], references: [id])
}

model MatriculationDetails {
  board             String
  nameOfInstitution String
  regNoYearOfPass   String
  percentage        Float
  applicantId       Int       @id
  aadharNo          String
  applicant         Applicant @relation(fields: [applicantId], references: [id])
}

model BankDetails {
  branch      String
  accountNo   String
  ifscCode    String
  applicantId Int       @id
  applicant   Applicant @relation(fields: [applicantId], references: [id])
}

model Phase {
  order             Int              @id
  name              String           @unique
  description       String
  DocumentUpdates   DocumentUpdate[]
  DocumentsRequired PhaseDocument[]
  Applicant         Applicant[]
}

model PhaseDocument {
  phaseId          Int
  includedQuotas   Quota[] @default([GENERAL, SC, ST , OBC , EWS])
  documentTypeCode String
  Phase            Phase            @relation(fields: [phaseId], references: [order])
  DocumentType     DocumentType     @relation(fields: [documentTypeCode], references: [code])
  DocumentUpdate   DocumentUpdate[]

  @@id([phaseId, documentTypeCode])
}

model Document {
  applicantId      Int
  filename         String
  url              String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  Applicant        Applicant        @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  DocumentUpdate   DocumentUpdate[]
  documentTypeCode String
  DocumentType     DocumentType     @relation(fields: [documentTypeCode], references: [name])

  @@id([applicantId, documentTypeCode])
}

model DocumentUpdate {
  phaseId          Int
  applicantId      Int
  verifierId       String        @db.Uuid
  verification     Boolean       @default(false)
  remark           String        @default("")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  Applicant        Applicant     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  Document         Document      @relation(fields: [applicantId, documentTypeCode], references: [applicantId, documentTypeCode], onDelete: Cascade)
  Phase            Phase         @relation(fields: [phaseId], references: [order], onDelete: Cascade)
  PhaseDocument    PhaseDocument @relation(fields: [phaseId, documentTypeCode], references: [phaseId, documentTypeCode])
  VerifiedBy       User          @relation(fields: [verifierId], references: [id])
  documentTypeCode String
  DocumentType     DocumentType  @relation(fields: [documentTypeCode], references: [name])

  @@id([applicantId, verifierId, phaseId, documentTypeCode])
  @@index([documentTypeCode])
  @@index([verifierId, phaseId])
  @@index([applicantId])
}
